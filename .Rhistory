}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
d_target <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- d_target(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp,mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
d_target <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- d_target(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- d_target(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- d_target(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
truehist(x)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- d_target(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
truehist(x)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- d_target(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
truehist(x)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- my_dtarget(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
truehist(x)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- my_dtarget(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:n-1){
xp <- rprop(x_ini, prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
truehist(x)
my_dtarget <- function(x){
return(0.2*dnorm(x, mean = -3, sd =2) + 0.5*dnorm(x, mean = 0, sd = 1) + 0.3*dnorm(x, mean = 5, sd =3))
}
val_x <- seq(from = -10, to = +20, len =1000)
val_y <- my_dtarget(val_x)
plot(val_x, val_y, col='red', lwd = 2, type = "l")
dprop <- function(xp, xi, prop_sd){
#on choisi une loi normale qui sera centree sur xi
return(dnorm(xp, mean = xi ,sd = prop_sd))
}
rprop <- function(xi, prop_sd){
return(rnorm(1, mean = xi, sd = prop_sd))
}
my_rtarget <- function(n, x_ini, prop_sd){
x <-rep(NA, times = n)
x[1] <- x_ini
for (i in 1:(n-1)){
xp <- rprop(x[i], prop_sd)
p <- min(1, my_dtarget(xp) / my_dtarget(x[i])*dprop(x[i], xp, prop_sd)/dprop(xp,x[i],prop_sd))
u <- runif(1)
if (u <p){
x[i + 1] <- xp
} else {
x[i+1] <- x[i]
}
}
return(x)
}
x <- my_rtarget(1000, 22.34, 8)
plot(x)
truehist(x)
n <- 1000000
theta <- runif(n)
head(theta)
n <- 1000000
theta <- runif(n)
head(theta)
x_star <- rbinom(1, size = 100, prob = theta)
head(x_star)
n <- 1000000
theta <- rep(NA, times = n)
x_star <- rep(NA, times = n)
for (i in 1:n){
theta[i] <- runif(1)
x_star[i] <- rbinom(1, size = 100, prob = theta[i])
}
n <- 1000000
theta <- rep(NA, times = n)
x_star <- rep(NA, times = n)
for (i in 1:n){
theta[i] <- runif(1)
x_star[i] <- rbinom(1, size = 100, prob = theta[i])
}
plot(x_star, theta)
theta[x_star ==70]
truehist(posterior)
posterior <- theta[x_star ==70]
truehist(posterior)
g <- function(x){
return((exp(x)-1)/(exp(1)-1))
}
# Graphe de la fonction cible
val_x <- seq(from = 0, to = 2, len = 1000)
val_y <- g(val_x)
plot(val_x, val_y, col = "red", type = "l", xlab = "x", ylab = "g(x)")
# Intégration numérique
integrate(g, lower = 0, upper = 2)
I_true <- (exp(2)-3)/(exp(1)-1)
print(I_true)
plot(val_x, val_y, col = "red", type = "l", xlab = "x", ylab = "g(x)")
blanc_noir <- function(n){
borne_inf <- 0
borne_sup <- 2
majorant <- g(2)
# on génère les abscisses (u) et les ordonnes (v)
u <- runif(n,borne_inf,borne_sup) # renvoi un nb reel, par defaut min et max sont 0 et 1
# definir orientation theta
v <- runif(n, 0, majorant)
ns <- sum(g(u) > v) # nb succes
return(majorant*(borne_sup-borne_inf)*(ns/n))
return(2*n/ns*r)
}
blanc_noir(1000)
mse_BW <- function(n,n_rep){
I_vec <- rep(NA, times = n_rep)
for (i in 1:n_rep){
I_vec[i] <- blanc_noir(n)
}
truehist(I_vec, col = "grey")
I_true <- ((exp(2)-3)/(exp(1)-1))
mse <- sum((I_vec-I_true)^2)
return(mse)
}
mse_BW(n = 100, n_rep = 10000)
library(MASS, lib.loc = "C:/Program Files/R/R-4.1.2/library")
mse_BW <- function(n,n_rep){
I_vec <- rep(NA, times = n_rep)
for (i in 1:n_rep){
I_vec[i] <- blanc_noir(n)
}
truehist(I_vec, col = "grey")
I_true <- ((exp(2)-3)/(exp(1)-1))
mse <- sum((I_vec-I_true)^2)
return(mse)
}
mse_BW(n = 100, n_rep = 10000)
I_true <- (exp(2)-3)/(exp(1)-1)
print(I_true)
# Intégration numérique
integrate(g, lower = 0, upper = 2)
blanc_noir <- function(n){
borne_inf <- 0
borne_sup <- 2
majorant <- g(2)
# on génère les abscisses (u) et les ordonnes (v)
u <- runif(n,borne_inf,borne_sup) # renvoi un nb reel, par defaut min et max sont 0 et 1
# definir orientation theta
v <- runif(n, 0, majorant)
ns <- sum(g(u) > v) # nb succes
return(majorant*(borne_sup-borne_inf)*(ns/n))
}
blanc_noir(1000)
mse_BW <- function(n,n_rep){
I_vec <- rep(NA, times = n_rep)
for (i in 1:n_rep){
I_vec[i] <- blanc_noir(n)
}
truehist(I_vec, col = "grey")
I_true <- ((exp(2)-3)/(exp(1)-1))
mse <- sum((I_vec-I_true)^2)
return(mse)
}
mse_BW(n = 100, n_rep = 10000)
simple <- function(n){
borne_inf <- 0
borne_sup <- 2
# on génère les abscisses (u) et les ordonnes (v)
u <- runif(n,borne_inf,borne_sup) # renvoi un nb reel, par defaut min et max sont 0 et 1
print(u)
# definir orientation theta
return(sum(g(u)*(borne_sup-borne_inf)/n))
}
simple(10)
blanc_noir <- function(n){
borne_inf <- 0
borne_sup <- 2
majorant <- g(2)
# on génère les abscisses (u) et les ordonnes (v)
u <- runif(n,borne_inf,borne_sup) # renvoi un nb reel, par defaut min et max sont 0 et 1
# definir orientation theta
v <- runif(n, 0, majorant)
ns <- sum(g(u) > v) # nb succes
return(majorant*(borne_sup-borne_inf)*(ns/n))
}
blanc_noir(1000)
blanc_noir(1000)
blanc_noir(1000)
blanc_noir(1000)
blanc_noir(1000)
estim_simple <- function(n){
x <- runif(n, min =0, max =2)
return(2*mean(g(x)))
}
estim_simple(100) #fluctue autour de 2,5 donc top
estim_simple <- function(n){
x <- runif(n, min =0, max =2)
return(2*mean(g(x)))
}
estim_simple(100) #fluctue autour de 2,5 donc top
estim_simple <- function(n){
x <- runif(n, min =0, max =2)
return(2*mean(g(x)))
}
estim_simple(100) #fluctue autour de 2,5 donc top
library("mixOmics")
library(mixOmics)
BiocManager::install('mixOmics')
library(mixOmics)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(cli)
library(tidyverse)
library(netOmics)
library(igraph)
library(gprofiler2)
library(org.Hs.eg.db))
library(org.Hs.eg.db)
install.packages("netOmics")
library(netOmics)
library(mixOmics)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(installr)
detach("package:installr", unload = TRUE)
library(installr)
sessionInfo()
library(installr)
library(mixOmics)
BiocManager::install('mixOmics')
library(mixOmics)
library(ggplot2)
install.packages("lifecycle")
library(ggplot2)
library(mixOmics)
install.packages("lifecycle")
install.packages("tidyverse")
library(ggplot2)
library(tidyverse)
install.packages("lifecycle")
library(tcltk, lib.loc = "C:/Program Files/R/R-4.2.1/library")
install.packages("lifecycle")
library(mixOmics)
library(ggplot2)
library(tidyverse)
library(cli)
library(glue)
library(rlang)
install.packages("lifecycle")
install.packages("lifecycle", dependencies = T)
install.packages("//lifecycle")
library(ggplot2)
library(mixOmics)
library(tidyverse)
install.packages("cli")
install.packages("cli")
library(tidyverse)
update.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(cli)
library(tidyverse)
detach("package:cli", unload = TRUE)
library(tidyverse)
install.packages("cli")
install.packages("cli")
install.packages("cli")
setwd("D:/M2_Bioinformatique/Omics/multi_omics")
data <- readRDS("data_tcga.Rds")
View(data)
data$mRNA
mRNa_data <- data$mRNA
View(mRNa_data)
prot_data <- data$prot
miRNA_data <- data$miRNA
View(miRNA_data)
sample_info_data <- data$sample_info
View(sample_info_data)
View(mRNa_data)
View(prot_data)
View(sample_info_data)
View(prot_data)
View(mRNa_data)
View(prot_data)
table(sample_info_data)
colnames(mRNa_data)
table(data)
dim(data)
data
